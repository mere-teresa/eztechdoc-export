<?php
/**
 * Clean file content
 * Rename files
 */
// edit these 2 lines to specify your folders
$dirname = "_md_for_github";
$newDirname = "_cleaned_md";
// Open the files by parsing the dir
$extensionFormat = "md";
$filename = "newFile.md";
$nbFiles = 0;
if (false === is_dir($dirname)) {
    die("Error: $dirname is not a directory.\n");
}
$fileList = scandir($dirname);
if (empty($fileList)) {
    die("Directory is empty.\n");
}
//Let's the fun begin
foreach ($fileList as $filename) {
    $cleanFileLines = array();
    if ($filename === '.' || $filename === '..') {
        continue;
    }
    //Human-readable output
    print("> Starting to process file................................'$filename' \n");
    if (false === $newName = computeFilename($filename, $extensionFormat)) {
        print ('Error in the creation of a new filename for ' . $filename . "\n");
    } else {
        $allLines = array();
        $allLines = file($dirname . DIRECTORY_SEPARATOR . $filename);
        // parse the lines
        $line = '';
        if (false === is_array($allLines)) {
            continue;
        }
        print("   Starting the cleanup...");
        foreach ($allLines as $line) {
            //delete non-necessary data
            $cleanedLine = cleanupData($line);
            $cleanedLine = cleanupFooter($cleanedLine);
            $cleanedFileLines[] = $cleanedLine;
        }
        print("...Ending the cleanup\n=====\n");
    }
//    $savedErrors = file_put_contents($newDirname . DIRECTORY_SEPARATOR . $newName, join($cleanFileLines));
    if (0 !== file_put_contents($newDirname . DIRECTORY_SEPARATOR . $newName, join($cleanedFileLines))) {
        print("   OK: New file $newName saved successfully.\n");
    } else {
        print("Error: Problem with file '$newName' ! \n");
    }
    $nbFiles++;
}
print("$nbFiles files were processed.\n");
/**
 * @param $line
 * @return string
 */
function cleanupData(&$line)
{

    $line = preg_replace('/^Created by <span class=\"author\"> .*$/m', '', $line);
    $line = preg_replace('/\[Atlassian\]\(http:\/\/www.atlassian.com\/\)/m', '', $line);
    $line = preg_replace('/^\\`Atlassian/m', '', $line);
    $line = preg_replace('/^Document generated by .*$/m', '', $line);
    $line = preg_replace('/^\# <span id="title-text">(.*)<\/span>$/', '$1', $line);
    return $line;
}

/**
 * @param $path
 * @param string $extension
 * @return string
 */
function computeFilename($path, $extension = '')
{
    $filename = strtolower(basename($path, '.md'));
    //if numbers in the filename
    if (preg_match('/(.*)_[0-9]+/', $filename, $m, PREG_OFFSET_CAPTURE)) {
        $title = $m[1][0];//only the captured part without numbers
    } else {
        $title = $filename;
    }
    $title = fixupMultipleSpaces($title);
    $title = str_replace('&', 'and', $title);
    $title = strtolower(str_replace(['-', ' '], '_', $title));
    return $title . '.' . $extension;
}

function fixupMultipleSpaces($text)
{
    return preg_replace("/(\r\n|\r|\n){2,}/", "\n", $text);
}

/**
 * @param string $line
 * @return string $line
 */
function cleanupFooter($line)
{
    if (false === is_string($line)) {
        return false;
    }
    $isFooter = false;
    $triggerChars = "------------------------------------------------------------------------";
    if (substr($line, 0) === $triggerChars) {
        $isFooter = true;
    }
    if ($isFooter) {
        print ".this is footer.\n";
        return null;
    } else {
        return $line;
    }
}
